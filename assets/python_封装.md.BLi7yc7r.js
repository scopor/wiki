import{_ as s,c as i,o as a,a5 as n}from"./chunks/framework.4sasYC7X.js";const g=JSON.parse('{"title":"封装","description":"","frontmatter":{},"headers":[],"relativePath":"python/封装.md","filePath":"python/封装.md"}'),t={name:"python/封装.md"},l=n(`<h1 id="封装" tabindex="-1">封装 <a class="header-anchor" href="#封装" aria-label="Permalink to &quot;封装&quot;">​</a></h1><p>封装指的是将数据和操作数据的函数（方法）封装在一个类中，隐藏内部实现细节，只暴露必要的接口。封装可以提高代码的可维护性、可扩展性和安全性。</p><h2 id="封装的作用" tabindex="-1">封装的作用 <a class="header-anchor" href="#封装的作用" aria-label="Permalink to &quot;封装的作用&quot;">​</a></h2><ul><li><strong>数据隐藏：</strong> 将类的属性设置为私有属性，防止外部直接访问和修改，只能通过类提供的方法来访问和修改。</li><li><strong>接口控制：</strong> 定义公共方法作为访问和操作数据的接口，控制外部访问数据的权限和方式。</li><li><strong>代码隔离：</strong> 封装将代码模块化，每个类都专注于特定的功能，提高代码的可读性和可维护性。</li></ul><h2 id="python-封装的实现" tabindex="-1">Python 封装的实现 <a class="header-anchor" href="#python-封装的实现" aria-label="Permalink to &quot;Python 封装的实现&quot;">​</a></h2><p>Python 使用命名约定来实现封装，而不是使用严格的访问控制机制（如 C++ 的 <code>private</code> 和 <code>public</code>）。</p><ul><li><strong>私有属性：</strong> 以双下划线 <code>__</code> 开头的属性被视为私有属性，只能在类内部访问。</li><li><strong>私有方法：</strong> 以双下划线 <code>__</code> 开头的 方法被视为私有方法，只能在类内部访问。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BankAccount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, balance):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.__balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 私有属性</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deposit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, amount):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.__balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> withdraw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, amount):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.__balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.__balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> amount</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Insufficient funds&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_balance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.__balance</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BankAccount(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_account.deposit(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_account.get_balance())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：1500</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># print(my_account.__balance)    # 报错：AttributeError: &#39;BankAccount&#39; object has no attribute &#39;__balance&#39;</span></span></code></pre></div><h2 id="访问私有属性和方法" tabindex="-1">访问私有属性和方法 <a class="header-anchor" href="#访问私有属性和方法" aria-label="Permalink to &quot;访问私有属性和方法&quot;">​</a></h2><p>虽然 Python 没有严格的访问控制机制，但是我们可以通过 <strong>名称改写</strong>（Name Mangling）来间接访问私有属性和方法。</p><ul><li>Python 会将以双下划线 <code>__</code> 开头的属性和方法改写成 <code>_类名__属性名</code> 或 <code>_类名__方法名</code> 的形式。</li><li>我们可以通过这种方式在类外部访问私有属性和方法，但这是一种非常规的做法，不建议使用。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问私有属性</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_account._BankAccount__balance)        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：1500</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问私有方法</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_account._BankAccount__withdraw(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：Insufficient funds</span></span></code></pre></div><h2 id="封装的优点" tabindex="-1">封装的优点 <a class="header-anchor" href="#封装的优点" aria-label="Permalink to &quot;封装的优点&quot;">​</a></h2><ul><li><strong>提高代码可维护性：</strong> 修改内部实现细节不会影响外部代码，方便维护。</li><li><strong>提高代码可扩展性：</strong> 可以添加新的私有属性和方法，而不会影响外部代码。</li><li><strong>提高代码安全性：</strong> 防止外部代码直接访问和修改私有属性，确保数据的完整性和一致性。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>封装是面向对象编程中的一个重要概念，它有助于编写更健壮、可维护和可扩展的代码。通过隐藏内部实现细节并提供必要的接口，封装可以提高代码的安全性，并降低维护成本。</p>`,16),h=[l];function e(p,k,r,d,o,c){return a(),i("div",null,h)}const y=s(t,[["render",e]]);export{g as __pageData,y as default};
