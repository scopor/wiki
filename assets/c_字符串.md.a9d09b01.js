import{_ as s,o as a,c as l,O as n}from"./chunks/framework.95b9d657.js";const A=JSON.parse('{"title":"字符串","description":"本文介绍了C语言中字符串的定义、初始化、字符串相关函数。","frontmatter":{"title":"字符串","head":[["meta",{"property":"og:title","content":"字符串"}],["meta",{"name":"description","content":"本文介绍了C语言中字符串的定义、初始化、字符串相关函数。"}],["meta",{"name":"keywords","content":"字符串的定义,初始化,字符串相关函数"}],["meta",{"property":"og:description","content":"本文介绍了C语言中字符串的定义、初始化、字符串相关函数。"}]]},"headers":[],"relativePath":"c/字符串.md","filePath":"c/字符串.md"}'),o={name:"c/字符串.md"},p=n(`<h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;" loading="lazy">​</a></h2><p>在 C 语言中，字符串是一组字符的序列。在 C 语言中，字符串以 <code>null</code> 字符<code> (&#39;\\0&#39;)</code> 结尾。</p><h2 id="初始化分配" tabindex="-1">初始化分配 <a class="header-anchor" href="#初始化分配" aria-label="Permalink to &quot;初始化分配&quot;" loading="lazy">​</a></h2><h3 id="静态分配" tabindex="-1">静态分配 <a class="header-anchor" href="#静态分配" aria-label="Permalink to &quot;静态分配&quot;" loading="lazy">​</a></h3><p>使用静态分配声明字符串，我们声明了一个 char 类型数组 str，该数组的长度为 10。我们还使用双引号将字符串 &quot;Hello&quot; 注入到数组中。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>需要注意的是，在 C 语言中静态分配的数组大小不能动态改变，在声明时就必须指定大小。如果超出了数组大小的范围，将会发生未定义行为。</p><h3 id="动态内存分配" tabindex="-1">动态内存分配 <a class="header-anchor" href="#动态内存分配" aria-label="Permalink to &quot;动态内存分配&quot;" loading="lazy">​</a></h3><p>使用动态内存分配函数 malloc 来为字符串分配内存方式如下:</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*)</span><span style="color:#82AAFF;">malloc</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">char</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#82AAFF;">strcpy</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>在这个例子中，我们使用 malloc 函数为字符串分配了一个长度为 6 的 char 类型数组的内存。我们还使用 strcpy 函数将常量 &quot;Hello&quot; 复制到动态分配的内存中。</p><p>需要注意的是，一旦完成对字符串的使用，需要显式地释放分配给字符串的内存，以避免出现内存泄漏的问题。例如：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">free</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">);</span></span></code></pre></div><p>这个语句将释放分配给字符串的内存。</p><h3 id="使用字符串常量" tabindex="-1">使用字符串常量 <a class="header-anchor" href="#使用字符串常量" aria-label="Permalink to &quot;使用字符串常量&quot;" loading="lazy">​</a></h3><p>使用字符串常量来表示字符串是一种通用的方法。例如：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>在这个例子中，我们声明了一个字符指针 str。该指针指向一个字符串常量 &quot;Hello World&quot;，这个字符串会被存储在内存中的只读数据区域，因此它在程序运行期间是一直可用的。</p><h2 id="字符串函数" tabindex="-1">字符串函数 <a class="header-anchor" href="#字符串函数" aria-label="Permalink to &quot;字符串函数&quot;" loading="lazy">​</a></h2><p>C语言提供了许多用于处理字符串的函数。以下是一些常用的字符串函数：</p><h3 id="strlen" tabindex="-1">strlen <a class="header-anchor" href="#strlen" aria-label="Permalink to &quot;strlen&quot;" loading="lazy">​</a></h3><p>strlen 函数用于计算字符串的长度（不包括 null 字符）。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">size_t</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">strlen</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">str</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="strcpy" tabindex="-1">strcpy <a class="header-anchor" href="#strcpy" aria-label="Permalink to &quot;strcpy&quot;" loading="lazy">​</a></h3><p>strcpy 函数用于将一个字符串复制到另一个字符串。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">strcpy</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">dest</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">src</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="strcat" tabindex="-1">strcat <a class="header-anchor" href="#strcat" aria-label="Permalink to &quot;strcat&quot;" loading="lazy">​</a></h3><p>strcat 函数用于将一个字符串追加到另一个字符串的末尾。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">strcat</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">dest</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">src</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="strcmp" tabindex="-1">strcmp <a class="header-anchor" href="#strcmp" aria-label="Permalink to &quot;strcmp&quot;" loading="lazy">​</a></h3><p>strcmp 函数用于比较两个字符串。</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#include</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">string.h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">strcmp</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">str1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">char</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;font-style:italic;">str2</span><span style="color:#89DDFF;">);</span></span></code></pre></div><h3 id="其他函数" tabindex="-1">其他函数 <a class="header-anchor" href="#其他函数" aria-label="Permalink to &quot;其他函数&quot;" loading="lazy">​</a></h3><p>除了上述函数外，C 语言还提供了许多其他字符串函数，如 strncpy、strncat、strncmp 等。这些函数都在 string.h 头文件中声明。</p>`,34),t=[p];function e(c,r,y,i,D,C){return a(),l("div",null,t)}const d=s(o,[["render",e]]);export{A as __pageData,d as default};
