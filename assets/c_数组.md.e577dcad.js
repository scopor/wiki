import{_ as s,o as a,c as l,O as n}from"./chunks/framework.95b9d657.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"c/数组.md","filePath":"c/数组.md"}'),o={name:"c/数组.md"},p=n(`<h2 id="_1-数组" tabindex="-1">1 数组 <a class="header-anchor" href="#_1-数组" aria-label="Permalink to &quot;1 数组&quot;" loading="lazy">​</a></h2><p>在 C 语言中，数组是一组具有相同数据类型的变量集合。这些变量按照顺序排列，并且可以通过一个共同的名称来访问它们。</p><h2 id="_2-定义" tabindex="-1">2 定义 <a class="header-anchor" href="#_2-定义" aria-label="Permalink to &quot;2 定义&quot;" loading="lazy">​</a></h2><p>在 C 语言中，我们可以使用以下方式来定义一个数组：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> array</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">];</span></span></code></pre></div><p>上述代码表示我们定义了一个包含 5 个整型元素的数组，它们被分配在内存中连续的位置上。我们也可以给数组初始化赋值：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> array</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">};</span></span></code></pre></div><p>当然，我们也可以只给部分元素赋初值：</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> array</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">};</span></span></code></pre></div><p>其余元素会自动初始化为 0 么? 答案是 不一定。</p><p>当定义一个数组时，只对其中一部分元素进行了初始化，只有被显式初始化的元素才会被赋予具体的值，而其他未初始化的元素则会保持为随机值。这些随机值的大小和分布是不可预测的，因此未初始化的数组元素可能是 0，也可能是其他随机值。这是因为在程序开始执行之前，内存中已经包含了各种随机值。这些值可能是上一次程序运行时留下的残留值，也可能是其他程序使用同一内存空间时留下的值。</p><p>如果我们不知道数组需要多大，或者需要动态改变其大小，则需要使用动态内存分配函数 malloc 函数来创建一个指向数组首地址的指针</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">array</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">array </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">malloc</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">sizeof(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">));</span></span></code></pre></div><p>上述代码表示我们创建了一个指向整型元素的指针，并且使用 malloc 函数申请了一块大小为 5 个整型元素所占字节数之和的空间。</p><h2 id="_5-特点" tabindex="-1">5 特点 <a class="header-anchor" href="#_5-特点" aria-label="Permalink to &quot;5 特点&quot;" loading="lazy">​</a></h2><ul><li>数组中的所有元素具有相同的数据类型；</li><li>数组在内存中是连续存储的，因此访问其元素速度较快；</li><li>数组长度是固定不变的，如果需要动态改变大小，则需要重新创建一个新的数组。</li></ul><h2 id="_6-多维数组" tabindex="-1">6 多维数组 <a class="header-anchor" href="#_6-多维数组" aria-label="Permalink to &quot;6 多维数组&quot;" loading="lazy">​</a></h2>`,17),e=[p];function t(c,r,y,i,C,D){return a(),l("div",null,e)}const A=s(o,[["render",t]]);export{d as __pageData,A as default};
