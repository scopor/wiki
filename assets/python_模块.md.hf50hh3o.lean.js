import{_ as i,c as a,a3 as n,o as e}from"./chunks/framework.B-UogkBA.js";const c=JSON.parse('{"title":"模块","description":"","frontmatter":{},"headers":[],"relativePath":"python/模块.md","filePath":"python/模块.md"}'),t={name:"python/模块.md"};function l(h,s,p,o,d,k){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h1><p>在 Python 的世界里，模块就像是一本本工具书，每个模块都包含了特定领域的功能函数、类和变量。合理使用模块可以提高代码的可复用性，减少重复造轮子，让你的 Python 代码更加简洁优雅。</p><h2 id="模块的本质" tabindex="-1">模块的本质 <a class="header-anchor" href="#模块的本质" aria-label="Permalink to &quot;模块的本质&quot;">​</a></h2><ul><li>模块本质上就是一个包含 Python 代码的 <code>.py</code> 文件。</li><li>这个文件可以定义函数、类、变量，以及可执行的代码。</li><li>模块就像一个工具箱，把实现特定功能的代码组织在一起。</li></ul><h2 id="模块的优点" tabindex="-1">模块的优点 <a class="header-anchor" href="#模块的优点" aria-label="Permalink to &quot;模块的优点&quot;">​</a></h2><ul><li><strong>代码重用:</strong> 避免重复编写代码，提高效率。</li><li><strong>代码组织:</strong> 将代码按照功能划分，提高可读性和可维护性。</li><li><strong>命名空间:</strong> 避免不同模块中相同名称的函数、类、变量发生冲突。</li></ul><h2 id="模块的类型" tabindex="-1">模块的类型 <a class="header-anchor" href="#模块的类型" aria-label="Permalink to &quot;模块的类型&quot;">​</a></h2><ul><li><strong>内置模块:</strong> Python 自带的模块，例如 <code>os</code>, <code>sys</code>, <code>math</code>, <code>random</code> 等。</li><li><strong>第三方模块:</strong> 由其他开发者创建的模块，需要先安装才能使用。例如 <code>requests</code>, <code>numpy</code>, <code>pandas</code> 等。</li><li><strong>自定义模块:</strong> 自己创建的模块，用于组织自己的代码。</li></ul><h2 id="模块的创建" tabindex="-1">模块的创建 <a class="header-anchor" href="#模块的创建" aria-label="Permalink to &quot;模块的创建&quot;">​</a></h2><p>创建一个 <code>.py</code> 文件，例如 <code>moudule.py</code> ，在文件中定义函数、类、变量等。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># mymodule.py 文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># main.py 文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mymodule</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mymodule.greet(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 调用自定义模块中的函数</span></span></code></pre></div><h2 id="模块的使用" tabindex="-1">模块的使用 <a class="header-anchor" href="#模块的使用" aria-label="Permalink to &quot;模块的使用&quot;">​</a></h2><h3 id="导入模块" tabindex="-1">导入模块 <a class="header-anchor" href="#导入模块" aria-label="Permalink to &quot;导入模块&quot;">​</a></h3><p>使用 <code>import</code> 关键字导入。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导入 math 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rnd  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导入 random 模块并起别名为 rnd</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从 os 模块导入 path 属性</span></span></code></pre></div><h3 id="导入模块成员" tabindex="-1">导入模块成员 <a class="header-anchor" href="#导入模块成员" aria-label="Permalink to &quot;导入模块成员&quot;">​</a></h3><p>使用 <code>.</code> 访问模块中的函数、类、变量。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> math </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导入 math 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> random </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rnd  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导入 random 模块并起别名为 rnd</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从 os 模块导入 path 属性</span></span></code></pre></div><h2 id="name-变量" tabindex="-1"><code>__name__</code> 变量 <a class="header-anchor" href="#name-变量" aria-label="Permalink to &quot;\`__name__\` 变量&quot;">​</a></h2><ul><li>每个模块都有一个内置变量 <code>__name__</code> 变量。</li><li>当直接运行模块文件时，该变量的值为 <code>__main__</code> 。</li><li>当模块被导入时，该变量的值为模块名。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># mymodule.py 文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    greet(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 只有当直接运行 mymodule.py 时才会执行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># main.py 文件，单纯导入不会执行 mymodule.py 中的 greet(&quot;Bob&quot;) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mymodule </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mymodule.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__name__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：mymodule</span></span></code></pre></div><h2 id="模块搜索路径" tabindex="-1">模块搜索路径 <a class="header-anchor" href="#模块搜索路径" aria-label="Permalink to &quot;模块搜索路径&quot;">​</a></h2><p>当你使用 <code>import</code> 语句导入模块时，Python 解释器会按照一定的顺序查找模块文件，这个顺序被称为 <strong>模块搜索路径</strong>。假设你想导入一个名为 <code>mymodule</code> 的模块。</p><ul><li>Python 解释器首先会查找 <strong>当前目录</strong> 下是否存在名为 <code>mymodule.py</code> 的文件。例如，如果你正在运行的 Python 文件是 <code>/home/user/project/main.py</code>，Python 会首先在 <code>/home/user/project/</code> 目录下查找 <code>mymodule.py</code>。</li><li>如果在当前目录下没有找到 <code>mymodule.py</code>，Python 就会查找 <code>PYTHONPATH </code> 环境变量** 中指定的目录。例如，如果你的 <code>PYTHONPATH </code> 设置为 <code>/usr/local/lib/python3.8/site-packages:/home/user/my_modules</code>，Python 会依次在 <code>/usr/local/lib/python3.8/site-packages</code> 和 <code>/home/user/my_modules</code> 目录下查找 <code>mymodule.py</code>。</li><li>如果在 <code>PYTHONPATH </code> 中也没有找到，Python 会继续在 <strong>Python 安装目录</strong> 下的 <code>lib/site-packages</code> 目录中查找。这个目录包含了 Python 自带的模块以及你使用 <code>pip install</code> 命令安装的第三方模块。</li></ul><h2 id="常用模块" tabindex="-1">常用模块 <a class="header-anchor" href="#常用模块" aria-label="Permalink to &quot;常用模块&quot;">​</a></h2><ul><li><strong><code>os</code>:</strong> 操作系统接口，例如文件操作、进程管理、环境变量等。</li><li><strong><code>sys</code>:</strong> Python 解释器信息，例如 Python 路径、命令行参数等。</li><li><strong><code>math</code>:</strong> 数学函数，例如三角函数、对数函数等。</li><li><strong><code>random</code>:</strong> 随机数生成。</li><li><strong><code>datetime</code>:</strong> 日期时间处理。</li><li><strong><code>requests</code>:</strong> HTTP 请求库。</li><li><strong><code>numpy</code>:</strong> 科学计算库，提供数组和矩阵运算。</li><li><strong><code>pandas</code>:</strong> 数据分析库，提供 <code>DataFrame</code> 数据结构。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Python 模块是组织代码、提高代码复用性和可维护性的重要工具。掌握模块的使用方法，可以让你编写出更加简洁、高效、易于维护的 Python 代码。</p>`,28)]))}const y=i(t,[["render",l]]);export{c as __pageData,y as default};
