import{_ as i,c as a,a3 as t,o as n}from"./chunks/framework.B-UogkBA.js";const c=JSON.parse('{"title":"字符串","description":"","frontmatter":{},"headers":[],"relativePath":"python/字符串.md","filePath":"python/字符串.md"}'),l={name:"python/字符串.md"};function h(e,s,p,d,k,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h1><p>在 Python 中，字符串类型 (str) 是用于存储和处理文本数据的一种基本数据类型。它由一系列字符组成，可以包含字母、数字、符号、空格等。</p><h2 id="字符串的创建" tabindex="-1">字符串的创建 <a class="header-anchor" href="#字符串的创建" aria-label="Permalink to &quot;字符串的创建&quot;">​</a></h2><p>使用引号创建字符串。</p><ul><li>单引号：<code>&#39;Hello, world!&#39;</code></li><li>双引号：<code>&quot;Hello, world!&quot;</code></li><li>三引号：<code>&quot;&quot;&quot;This is a multiline string.&quot;&quot;&quot;</code> 用于创建多行字符串，可以包含换行符和缩进。</li></ul><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello world&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello world&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;This is a </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">multiline string&quot;&quot;&quot;</span></span></code></pre></div><h2 id="字符串的本质" tabindex="-1">字符串的本质 <a class="header-anchor" href="#字符串的本质" aria-label="Permalink to &quot;字符串的本质&quot;">​</a></h2><ul><li>字符串是不可变的，这意味着一旦创建了一个字符串，就不能直接修改它的内容。如果需要修改，只能创建一个新的字符串。</li><li>字符串是序列类型，这意味着可以像访问列表元素一样访问字符串中的单个字符。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 尝试修改字符串中的第一个字符为 &#39;J&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_string[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;J&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行这段代码会报错：TypeError: &#39;str&#39; object does not support item assignment</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 因为字符串是不可变的，所以无法直接修改它里面的字符。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果想修改，你需要创建一个新的字符串。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;J&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_string[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:] </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(new_string)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：Jello</span></span></code></pre></div><p>这可能看起来有些奇怪，但这种不可变性带来的好处是：</p><ul><li><strong>安全性：</strong> 因为字符串不可变，所以在多线程环境中使用字符串时，可以保证多个线程不会互相干扰。</li><li><strong>效率：</strong> 字符串的不可变性可以让 Python 更好地优化字符串操作，比如使用缓存技术。</li></ul><h2 id="字符串的常用操作" tabindex="-1">字符串的常用操作 <a class="header-anchor" href="#字符串的常用操作" aria-label="Permalink to &quot;字符串的常用操作&quot;">​</a></h2><h3 id="字符访问" tabindex="-1">字符访问 <a class="header-anchor" href="#字符访问" aria-label="Permalink to &quot;字符访问&quot;">​</a></h3><ul><li>使用索引访问单个字符，从 0 开始计数，第一个字符的索引为 0。</li><li>可以使用负数索引访问从末尾开始的字符，最后一个字符的索引为 -1。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_string[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：H</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_string[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：o</span></span></code></pre></div><h3 id="字符串切片" tabindex="-1">字符串切片 <a class="header-anchor" href="#字符串切片" aria-label="Permalink to &quot;字符串切片&quot;">​</a></h3><p>使用切片操作可以提取字符串的子串，格式为：<code>string[start:end:step]</code>，其中：</p><ul><li><code>start</code>: 切片的起始索引，默认为 0。</li><li><code>end</code>: 切片的结束索引，不包含该索引处的字符。默认为字符串的长度。</li><li><code>step</code>: 切片的步长，默认为 1，表示每个字符都包含在切片中。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_string[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：world</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_string[:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：Hello</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(my_string[::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：Hlo,wrld!</span></span></code></pre></div><h3 id="字符串拼接" tabindex="-1">字符串拼接 <a class="header-anchor" href="#字符串拼接" aria-label="Permalink to &quot;字符串拼接&quot;">​</a></h3><ul><li>使用 <code>+</code> 运算符可以拼接两个或多个字符串。</li><li>使用 <code>join()</code> 方法可以将一个列表或元组中的元素拼接成一个字符串，并用指定的字符作为分隔符。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">first_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">last_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Smith&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">full_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last_name  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(full_name)          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：Alice Smith</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">names </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Charlie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">names_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.join(names)           </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(names_string)       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：Alice, Bob, Charlie</span></span></code></pre></div><h3 id="字符串重复" tabindex="-1">字符串重复 <a class="header-anchor" href="#字符串重复" aria-label="Permalink to &quot;字符串重复&quot;">​</a></h3><p>使用 <code>*</code> 运算符可以重复字符串。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">my_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">repeated_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repeated_string)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：HelloHelloHello</span></span></code></pre></div><h3 id="字符串格式化" tabindex="-1">字符串格式化 <a class="header-anchor" href="#字符串格式化" aria-label="Permalink to &quot;字符串格式化&quot;">​</a></h3><ul><li>使用 <code>format()</code> 方法可以将字符串中的占位符替换为实际的值。</li><li>可以使用 <code>f-string</code> 语法进行格式化，语法更简洁。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My name is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, and I am </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> years old.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(name, age))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：My name is Alice, and I am 30 years old.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My name is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, and I am </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> years old.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：My name is Alice, and I am 30 years old.</span></span></code></pre></div><h2 id="字符串常用方法" tabindex="-1">字符串常用方法 <a class="header-anchor" href="#字符串常用方法" aria-label="Permalink to &quot;字符串常用方法&quot;">​</a></h2><p>Python 提供了丰富的字符串方法，可以方便地操作字符串。</p><table tabindex="0"><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>upper()</code></td><td>将字符串转换为大写</td><td><code>my_string.upper()</code></td></tr><tr><td><code>lower()</code></td><td>将字符串转换为小写</td><td><code>my_string.lower()</code></td></tr><tr><td><code>capitalize()</code></td><td>将字符串首字母大写</td><td><code>my_string.capitalize()</code></td></tr><tr><td><code>title()</code></td><td>将字符串每个单词的首字母大写</td><td><code>my_string.title()</code></td></tr><tr><td><code>strip()</code></td><td>去除字符串首尾空格</td><td><code>my_string.strip()</code></td></tr><tr><td><code>replace(old, new)</code></td><td>替换字符串中的字符</td><td><code>my_string.replace(&quot; &quot;, &quot;_&quot;)</code></td></tr><tr><td><code>split(sep)</code></td><td>将字符串按照分隔符分割成列表</td><td><code>my_string.split(&quot;,&quot;)</code></td></tr><tr><td><code>join(iterable)</code></td><td>将列表或元组中的元素拼接成字符串</td><td><code>&quot;, &quot;.join(names)</code></td></tr><tr><td><code>find(substring)</code></td><td>查找子串在字符串中的位置</td><td><code>my_string.find(&quot;world&quot;)</code></td></tr><tr><td><code>count(substring)</code></td><td>统计子串在字符串中出现的次数</td><td><code>my_string.count(&quot;l&quot;)</code></td></tr><tr><td><code>startswith(prefix)</code></td><td>判断字符串是否以指定前缀开头</td><td><code>my_string.startswith(&quot;Hello&quot;)</code></td></tr><tr><td><code>endswith(suffix)</code></td><td>判断字符串是否以指定后缀结尾</td><td><code>my_string.endswith(&quot;.txt&quot;)</code></td></tr><tr><td><code>isdigit()</code></td><td>判断字符串是否只包含数字</td><td><code>my_string.isdigit()</code></td></tr><tr><td><code>isalpha()</code></td><td>判断字符串是否只包含字母</td><td><code>my_string.isalpha()</code></td></tr><tr><td><code>isalnum()</code></td><td>判断字符串是否只包含字母或数字</td><td><code>my_string.isalnum()</code></td></tr><tr><td><code>islower()</code></td><td>判断字符串是否全部是小写字母</td><td><code>my_string.islower()</code></td></tr><tr><td><code>isupper()</code></td><td>判断字符串是否全部是大写字母</td><td><code>my_string.isupper()</code></td></tr></tbody></table><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li>字符串是不可变的，因此无法直接修改字符串的内容。</li><li>可以使用字符串方法来创建新的字符串，并将其赋值给新的变量。</li><li>当需要对字符串进行大量操作时，可以考虑使用字符串缓冲区 (buffer) 来提高效率，字符串缓冲区需要使用类库 <code>io</code>，后续再介绍。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>字符串是 Python 中非常重要的数据类型，它提供了丰富的功能和操作方法，能够满足各种文本处理需求。 掌握字符串的常用操作和方法，将有助于你编写更加高效、灵活的 Python 代码。</p>`,35)]))}const g=i(l,[["render",h]]);export{c as __pageData,g as default};
